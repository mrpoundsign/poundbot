// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

import types "github.com/poundbot/poundbot/types"

// AccountsStore is an autogenerated mock type for the AccountsStore type
type AccountsStore struct {
	mock.Mock
}

// AddClan provides a mock function with given fields: serverKey, clan
func (_m *AccountsStore) AddClan(serverKey string, clan types.Clan) error {
	ret := _m.Called(serverKey, clan)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.Clan) error); ok {
		r0 = rf(serverKey, clan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddServer provides a mock function with given fields: snowflake, server
func (_m *AccountsStore) AddServer(snowflake string, server types.Server) error {
	ret := _m.Called(snowflake, server)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.Server) error); ok {
		r0 = rf(snowflake, server)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// All provides a mock function with given fields: _a0
func (_m *AccountsStore) All(_a0 *[]types.Account) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]types.Account) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByDiscordGuild provides a mock function with given fields: snowflake
func (_m *AccountsStore) GetByDiscordGuild(snowflake string) (types.Account, error) {
	ret := _m.Called(snowflake)

	var r0 types.Account
	if rf, ok := ret.Get(0).(func(string) types.Account); ok {
		r0 = rf(snowflake)
	} else {
		r0 = ret.Get(0).(types.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(snowflake)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByServerKey provides a mock function with given fields: serverKey
func (_m *AccountsStore) GetByServerKey(serverKey string) (types.Account, error) {
	ret := _m.Called(serverKey)

	var r0 types.Account
	if rf, ok := ret.Get(0).(func(string) types.Account); ok {
		r0 = rf(serverKey)
	} else {
		r0 = ret.Get(0).(types.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serverKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: snowflake
func (_m *AccountsStore) Remove(snowflake string) error {
	ret := _m.Called(snowflake)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(snowflake)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveClan provides a mock function with given fields: serverKey, clanTag
func (_m *AccountsStore) RemoveClan(serverKey string, clanTag string) error {
	ret := _m.Called(serverKey, clanTag)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(serverKey, clanTag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveNotInDiscordGuildList provides a mock function with given fields: guildIDs
func (_m *AccountsStore) RemoveNotInDiscordGuildList(guildIDs []string) error {
	ret := _m.Called(guildIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(guildIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveServer provides a mock function with given fields: snowflake, serverKey
func (_m *AccountsStore) RemoveServer(snowflake string, serverKey string) error {
	ret := _m.Called(snowflake, serverKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(snowflake, serverKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetClans provides a mock function with given fields: serverKey, clans
func (_m *AccountsStore) SetClans(serverKey string, clans []types.Clan) error {
	ret := _m.Called(serverKey, clans)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []types.Clan) error); ok {
		r0 = rf(serverKey, clans)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Touch provides a mock function with given fields: serverKey
func (_m *AccountsStore) Touch(serverKey string) error {
	ret := _m.Called(serverKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(serverKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateServer provides a mock function with given fields: snowflake, oldKey, server
func (_m *AccountsStore) UpdateServer(snowflake string, oldKey string, server types.Server) error {
	ret := _m.Called(snowflake, oldKey, server)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, types.Server) error); ok {
		r0 = rf(snowflake, oldKey, server)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertBase provides a mock function with given fields: _a0
func (_m *AccountsStore) UpsertBase(_a0 types.BaseAccount) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.BaseAccount) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
