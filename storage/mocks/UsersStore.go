// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import storage "github.com/poundbot/poundbot/storage"
import types "github.com/poundbot/poundbot/types"

// UsersStore is an autogenerated mock type for the UsersStore type
type UsersStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: PlayerID
func (_m *UsersStore) Get(PlayerID string) (types.User, error) {
	ret := _m.Called(PlayerID)

	var r0 types.User
	if rf, ok := ret.Get(0).(func(string) types.User); ok {
		r0 = rf(PlayerID)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(PlayerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnowflake provides a mock function with given fields: snowflake
func (_m *UsersStore) GetSnowflake(snowflake string) (types.User, error) {
	ret := _m.Called(snowflake)

	var r0 types.User
	if rf, ok := ret.Get(0).(func(string) types.User); ok {
		r0 = rf(snowflake)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(snowflake)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertPlayer provides a mock function with given fields: info
func (_m *UsersStore) UpsertPlayer(info storage.UserInfoGetter) error {
	ret := _m.Called(info)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.UserInfoGetter) error); ok {
		r0 = rf(info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
