// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

import types "bitbucket.org/mrpoundsign/poundbot/types"

// UsersStore is an autogenerated mock type for the UsersStore type
type UsersStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: steamID
func (_m *UsersStore) Get(steamID uint64) (types.User, error) {
	ret := _m.Called(steamID)

	var r0 types.User
	if rf, ok := ret.Get(0).(func(uint64) types.User); ok {
		r0 = rf(steamID)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(steamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnowflake provides a mock function with given fields: snowflake
func (_m *UsersStore) GetSnowflake(snowflake string) (types.User, error) {
	ret := _m.Called(snowflake)

	var r0 types.User
	if rf, ok := ret.Get(0).(func(string) types.User); ok {
		r0 = rf(snowflake)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(snowflake)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertBase provides a mock function with given fields: baseUser
func (_m *UsersStore) UpsertBase(baseUser types.BaseUser) error {
	ret := _m.Called(baseUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.BaseUser) error); ok {
		r0 = rf(baseUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
