// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"

import types "bitbucket.org/mrpoundsign/poundbot/types"

// DiscordAuthsStore is an autogenerated mock type for the DiscordAuthsStore type
type DiscordAuthsStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: discordName, da
func (_m *DiscordAuthsStore) Get(discordName string, da *types.DiscordAuth) error {
	ret := _m.Called(discordName, da)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *types.DiscordAuth) error); ok {
		r0 = rf(discordName, da)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSnowflake provides a mock function with given fields: snowflake, da
func (_m *DiscordAuthsStore) GetSnowflake(snowflake string, da *types.DiscordAuth) error {
	ret := _m.Called(snowflake, da)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *types.DiscordAuth) error); ok {
		r0 = rf(snowflake, da)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: _a0
func (_m *DiscordAuthsStore) Remove(_a0 types.SteamInfo) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.SteamInfo) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upsert provides a mock function with given fields: _a0
func (_m *DiscordAuthsStore) Upsert(_a0 types.DiscordAuth) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.DiscordAuth) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
