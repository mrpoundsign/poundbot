// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import types "bitbucket.org/mrpoundsign/poundbot/types"

// UsersStore is an autogenerated mock type for the UsersStore type
type UsersStore struct {
	mock.Mock
}

// UpsertBase provides a mock function with given fields: _a0
func (_m *UsersStore) UpsertBase(_a0 types.BaseUser) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.BaseUser) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *UsersStore) Get(_a0 types.SteamInfo) (*types.User, error) {
	ret := _m.Called(_a0)

	var r0 *types.User
	if rf, ok := ret.Get(0).(func(types.SteamInfo) *types.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.SteamInfo) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveClan provides a mock function with given fields: tag
func (_m *UsersStore) RemoveClan(tag string) error {
	ret := _m.Called(tag)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveClansNotIn provides a mock function with given fields: tags
func (_m *UsersStore) RemoveClansNotIn(tags []string) error {
	ret := _m.Called(tags)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetClanIn provides a mock function with given fields: tag, steamIds
func (_m *UsersStore) SetClanIn(tag string, steamIds []uint64) error {
	ret := _m.Called(tag, steamIds)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []uint64) error); ok {
		r0 = rf(tag, steamIds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
